name: CI/CD Deployment for Express.js

on:
  push:
    branches:
      - master


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update environment.prod.ts with GitHub Secrets
        run: |
          sed -i 's|<GITHUB_BASE_URL>|${{ secrets.BASE_URL }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_PORT_URL>|${{ secrets.PORT_URL }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_MONGODB_URL>|${{ secrets.MONGODB_URL }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_JWT_SECRET>|${{ secrets.JWT_SECRET }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_NODE_ENV>|${{ secrets.NODE_ENV }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_GOOGLE_CLIENT_ID>|${{ secrets.GOOGLE_CLIENT_ID }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_GOOGLE_CLIENT_SECRET>|${{ secrets.GOOGLE_CLIENT_SECRET }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_SESSION_SECRET>|${{ secrets.SESSION_SECRET }}|g' ./env/environment.prod.ts
          CRT_KEY_ESCAPED=$(echo "${{ secrets.CRT_KEY }}" | sed ':a;N;$!ba;s|\n|\\n|g')
          sed -i "s|<GITHUB_CRT_KEY>|$CRT_KEY_ESCAPED|g" ./env/environment.prod.ts
          sed -i 's|<GITHUB_PASSPHRASE>|${{ secrets.PASSPHRASE }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_POSTGRE_USER>|${{ secrets.SECRET_POSTGRE }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_POSTGRE_PASS>|${{ secrets.USER_POSTGRE }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_SONAR_HOST_URL>|${{ secrets.SONAR_HOST_URL }}|g' ./env/environment.prod.ts
          sed -i 's|<GITHUB_SONARQUBE_TOKEN>|${{ secrets.SONARQUBE_TOKEN }}|g' ./env/environment.prod.ts

      - name: Copy environment.prod.ts to environment.ts
        run: |
          cp ./env/environment.prod.ts ./env/environment.ts

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.20.7'

      - name: Install dependencies
        run: npm install

      - name: Build project (si tu utilises un build process comme Webpack)
        run: npm run build

      - name: Set up SSH key
        run: |
          # Créer le répertoire .ssh s'il n'existe pas
          mkdir -p ~/.ssh
          # Ajouter la clé privée SSH
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          # Ajouter l'hôte à known_hosts pour éviter des erreurs de vérification
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
          # Démarrer l'agent SSH et ajouter la clé privée
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/deploy_key

      - name: Copy docker files
        run: |
          cp ./Dockerfile ./dist
          cp ./docker-compose.yml ./dist
          cp ./package.json ./dist
          cp ./macromate-ynov_me.* ./dist

      - name: Check if the certificate file exists
        run: |
          echo "Listing files in the root directory:"
          ls -l
          echo "Checking if macromate-ynov_me.crt exists:"
          if [ -f macromate-ynov_me.crt ]; then
            echo "Certificate file macromate-ynov_me.crt found."
          else
            echo "Certificate file macromate-ynov_me.crt not found."
          fi

      - name: Rsync deployment
        run: |
          rsync /home/runner/work/back/back/dist ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:~/ --rsh "ssh -i /home/runner/.ssh/deploy_key -o StrictHostKeyChecking=no" --recursive -rltgoDzvO

      - name: Restart application with Docker Compose
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << 'EOF'
            cd ~/dist
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
          EOF
          

      - name: Wait for SonarQube to be ready
        run: |
          until curl -v -sSL -u ${SONARQUBE_TOKEN}: --cacert macromate-ynov_me.crt https://macromate-ynov.me:8000/api/system/health | grep '"health":"GREEN"'; do
            echo "Waiting for SonarQube to be ready..."
            sleep 10
          done

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

