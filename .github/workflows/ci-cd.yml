name: CI/CD Express TypeScript

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:


#      - name: Run linter
#        run: |
#          npm run lint

#      - name: Run tests
#        run: |
#          npm run test -- --coverage

#      - name: Upload test coverage to Grafana dashboard
#        run: |
#          # Assurez-vous de bien configurer vos clés d'API ou exporter vos credentials avant
#          curl -X POST -H "Content-Type: application/json" \
#            -d @coverage-summary.json \
#            "https://your-grafana-instance/api/datasources/proxy/1/metrics/api/v1/import"
      - name: Build Docker image
        run: |
          docker build -t express-ts-app .


      - name: Start application with Docker Compose
        run: |
          docker-compose up -d


  # Vous pouvez ajouter d'autres jobs selon vos besoins, comme la publication ou l'intégration continue
